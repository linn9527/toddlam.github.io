[{"categories":null,"content":"大概是个人 ","date":"2019-08-02","objectID":"/about/:0:0","tags":null,"title":"About Me","uri":"/about/"},{"categories":["algorithm"],"content":"问题详情 N 个数据 如何拿到 前 M 个最大数 ","date":"2018-03-24","objectID":"/top-n/:1:0","tags":["algorithm"],"title":"TopN问题","uri":"/top-n/"},{"categories":["algorithm"],"content":"问题分析 排序可以完全解决这个问题，排序时间复杂度可达 O(NlogN)，最简单的方式就是快排，然后取前 M 个值，或者最简单的冒泡排序也凑合，至少能出结果～～ 较好的做法是，使用快排时加退出状态，当确认了第 M 个位置的数据时，后续就不需要递归下去了，这样可以减少一点点时间，最快可以达到 O(N) 根据 It works. 原则 我们已经把问题解决了～～哈哈哈哈。。。 👇 👇 👇 笑完咱继续 没那么简单没那么简单 \" 没那么简单 Q：当我一个文本文件有 5M 的数据 但是不允许你用超过 5M 的内存，这时候，其实所有数据同时存在内存中是不可能的 就是要放弃排序的处理方式「..「 ","date":"2018-03-24","objectID":"/top-n/:2:0","tags":["algorithm"],"title":"TopN问题","uri":"/top-n/"},{"categories":["algorithm"],"content":"解决方式 So，假设内存中已读入了 M 个数据，剩余的数据每一个读取后，替换掉 M 个数据中的最小值，使用的时间大约为 M(N-M)+MlogM (一次 M 个数据排序，加上N-M个数据每次插入比较，大概吧 这种方式至少不需全部数据读取 但是每次读取一个数据后，都要找到当前数据的目标位置，会影响性能 所以，我们可以选择小顶堆这种数据结构 👇 👇 👇 此为小顶堆，大概长这样 小顶堆小顶堆 \" 小顶堆 利用小顶堆的特性，我们可以每次比较输入数据与堆顶数据，如果替换后不满足小顶堆的性质，则再自上而下进行一次构建 上代码 \u003c?php /* 变量什么的 Global 最好啦 */ $array = [8, 3, 9, 0, 4, 2, 5, 7, 1, 6]; $n = 5; topn($array,$n); /* 入口 */ function topn(\u0026$array,$n){ /* 创建前 n 个数组元素的小顶堆 */ $m = count($array); echo \"begin tree\",PHP_EOL; echo json_encode($array),PHP_EOL; createTree($array,$n); echo json_encode($array),PHP_EOL; echo \"end tree\",PHP_EOL; for($i = $n;$i \u003c $m;$i++){ if($array[0] \u003e= $array[$i]) { continue; } $tmp = $array[$i]; $array[$i] = $array[0]; $array[0] = $tmp; echo \"update tree\",PHP_EOL; upToDown($array,0,$n); echo json_encode($array),PHP_EOL; } /* 顺便排个序 */ echo \"begin tree sort\",PHP_EOL; echo json_encode($array),PHP_EOL; for($i = $n-1;$i \u003e= 0;$i--){ $tmp = $array[$i]; $array[$i] = $array[0]; $array[0] = $tmp; upToDown($array,0,$i); } echo json_encode($array),PHP_EOL; echo \"end tree sort\",PHP_EOL; } /* 初始化前N个节点为最小堆 */ function createTree(\u0026$array,$n){ /* 从最小的二叉树从下往上开始构建最小堆 */ for ($i = round(($n - 1) / 2); $i\u003e=0; $i--){ upToDown($array,$i,$n); } } /* 判断节点 $i 是否最小堆，左节点 left 右节点 right */ function upToDown(\u0026$array,$i, $n){ $left = $i * 2 + 1; $right = $left + 1; /* 没意义的 哈哈哈 */ $point = $i; echo \"left:$left,right$right,i$i\",PHP_EOL; if($left \u003e= $n){ return 'happy ending'; }elseif($right \u003e= $n){ $point = $left; }else{ $point = $array[$left] \u003c $array[$right] ? $left : $right; } /* 当前不是小顶堆 */ if($array[$point] \u003c $array[$i]){ $tmp = $array[$point]; $array[$point] = $array[$i]; $array[$i] = $tmp; return upToDown($array,$point,$n); }else{ return 'happy ending'; } } ?\u003e 时间大概为 (N-M)logM+MlogM 对比 M(N-M)+MlogM 当 M \u003e 1 ，前者小于后者 PS：当 M \u003e= 1/2N 时，可以尝试用大顶堆找出前 N-M 个最小值然后排除掉哟（反正又不用排序「_「 哼） ","date":"2018-03-24","objectID":"/top-n/:3:0","tags":["algorithm"],"title":"TopN问题","uri":"/top-n/"},{"categories":["documentation"],"content":" 一般情况下，直接使用原生 Javascript 的代码是通用的 // 创建 XMLHttpRequest 对象 var xmlHttpRequestObject = null; if (window.ActiveXObject) { xmlHttpRequestObject = new ActiveXObject(\"Microsoft.XMLHTTP\"); } else { xmlHttpRequestObject = new XMLHttpRequest(); } var url = \"target.html\"; // 目标路径 var data = \"\"; // 传输的数据 xmlHttpRequestObject.open(\"POST\" , url , true); // 第三个参数默认 true 异步 false 同步 xmlHttpRequestObject.setRequestHeader(\"Content-Type\" , \"application/x-www-form-urlencoded\"); xmlHttpRequestObject.onreadystatechange = function() { // readyState产生变化时需要运行 if (xmlHttpRequestObject.readyState == 4 \u0026\u0026 xmlHttpRequestObject) { var res = xmlHttpRequestObject.responseText; var jsonObject = eval(\"(\"+res+\")\"); } } xmlHttpRequestObject.send(data); 原生JS使用XMLHttpRequest对象进行异步通信，下面为该对象的主要属性与方法 属性：onreadystatechange 在readyState变化时运行的方法 属性：readyState 状态描述 0 请求未初始化（在调用 open() 之前） 1 请求已提出（调用 send() 之前） 2 请求已发送（这里通常可以从响应得到内容头部） 3 请求处理中（响应中通常有部分数据可用，但是服务器还没有完成响应） 4 请求已完成（可以访问服务器响应并使用它） 属性：responseText 由服务器返回的数据 方法：open(type,url,true/false) 初始化请求：第一个参数为请求类型，第二个参数为请求路径，第三个参数为是否异步传输 方法：send(data) 发送请求：data为传输的数据 方法：setRequestHeader(“header”,“value”); 设置请求头，Send之前","date":"2016-04-08","objectID":"/javascript-ajax/:0:0","tags":["javascript"],"title":"Javascript原生使用Ajax","uri":"/javascript-ajax/"},{"categories":["tool"],"content":"随便记 uname -a 显示当前系统信息 -a 表示 all pwd 显示当前路径 chattr +i / -i 增加/去除 强制不能修改文件，啥都不能改，常用在 /etc/resolv.conf 上，还有其它用法 lsattr a.txt是对应的查看 chmod 修改权限 chown 修改拥有者 docker rmi $(docker images | grep \"none\" | awk '{print $3}') docker 删除镜像 dig www.baidu.com @114.114.114.114 验证DNS man -t man | open -f -a Preview 用 PDF 来查看 man 文档 贼6 caffeinate -t 3600 Mac 不休眠 一小时 ","date":"2016-03-29","objectID":"/linux-common-command/:1:0","tags":["linux","command"],"title":"Linux常用的命令","uri":"/linux-common-command/"},{"categories":["tool"],"content":"想加再加","date":"2016-03-29","objectID":"/linux-common-command/:1:1","tags":["linux","command"],"title":"Linux常用的命令","uri":"/linux-common-command/"},{"categories":["documentation"],"content":"基础环境 ","date":"2016-03-28","objectID":"/linux-nginx-php-mysql/:1:0","tags":["linux","php","nginx","mysql"],"title":"LNMP 基础环境搭建","uri":"/linux-nginx-php-mysql/"},{"categories":["documentation"],"content":"系统 Debian 3.16.0-4-686-pae #1 SMP Debian 3.16.7-ckt20-1+deb8u1 (2015-12-14) i686 GNU/Linux ","date":"2016-03-28","objectID":"/linux-nginx-php-mysql/:1:1","tags":["linux","php","nginx","mysql"],"title":"LNMP 基础环境搭建","uri":"/linux-nginx-php-mysql/"},{"categories":["documentation"],"content":"软件 php7.0.4, nginx1.9.12, mysql或mariadb ","date":"2016-03-28","objectID":"/linux-nginx-php-mysql/:1:2","tags":["linux","php","nginx","mysql"],"title":"LNMP 基础环境搭建","uri":"/linux-nginx-php-mysql/"},{"categories":["documentation"],"content":"安装 ","date":"2016-03-28","objectID":"/linux-nginx-php-mysql/:2:0","tags":["linux","php","nginx","mysql"],"title":"LNMP 基础环境搭建","uri":"/linux-nginx-php-mysql/"},{"categories":["documentation"],"content":"更新软件包 （只是每天都干，顺手） #apt-get update \u0026 #apt-get upgade ","date":"2016-03-28","objectID":"/linux-nginx-php-mysql/:2:1","tags":["linux","php","nginx","mysql"],"title":"LNMP 基础环境搭建","uri":"/linux-nginx-php-mysql/"},{"categories":["documentation"],"content":"手动安装（Debian里面的包不是最新的，全部手工安装） 安装 Nginx （官网） 下载安装包 wget http://nginx.org/download/nginx-1.9.12.tar.gz 解压缩 tar -zxvf nginx-1.9.12.tar.gz 进入目标目录 cd ./nginx-1.9.12 配置 ./configure --prefix=/usr/local/nginx 报错 找不到 cc 编译器， 装 gcc #apt-get install gcc，再执行第四步 报错 ./configure: error: the HTTP rewrite module requires the PCRE library. 需要 PCRE 库， #apt-get install libpcre3 libpcre3-dev，再执行第四步 报错 ./configure: error: the HTTP gzip module requires the zlib library. 需要 zlib 库 #apt-get install zlib1g-dev，再执行第四步 安装 #make \u0026\u0026 make install 报错，找不到 make （「..「|||） 安装 make 工具 #apt-get install make，再执行第八步 安装完，先修改一下配置文件，将端口修改为8080（已装有Apache默认监听了80，避免端口冲突） 执行 /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf 然后访问 localhost:8080 就可以看到欢迎页面了 Welcome to NginxWelcome to Nginx \" Welcome to Nginx ","date":"2016-03-28","objectID":"/linux-nginx-php-mysql/:2:2","tags":["linux","php","nginx","mysql"],"title":"LNMP 基础环境搭建","uri":"/linux-nginx-php-mysql/"},{"categories":["documentation"],"content":"安装 Mariadb （官网） Nginx 和 PHP ，两者其实在运行过程中与 mysql 基本没有什么特别关系，所以按照最方便的方式安装即可 #sudo apt-get install mariadb-client mariadb-server 测试 mysql -u root -p 输入密码 OK ","date":"2016-03-28","objectID":"/linux-nginx-php-mysql/:2:3","tags":["linux","php","nginx","mysql"],"title":"LNMP 基础环境搭建","uri":"/linux-nginx-php-mysql/"},{"categories":["documentation"],"content":"安装 PHP7 （官网) 下载官方最新版安装包 git clone http://git.php.net/repository/php-src.git 比较慢 进入目录，里面有 travis 集成的脚本，可自行查看安装过程（不用做） 执行 ./buildconf 缺什么软件装什么软件～～不一一细说 configure 操作，详情可参考2 ./configure --prefix=/usr/local/php7 \\ --with-config-file-path=/usr/local/php7/etc \\ --with-mcrypt=/usr/include \\ --with-mysqli \\ --with-pdo-mysql \\ --with-gd \\ --with-iconv \\ --with-zlib \\ --enable-xml \\ --enable-bcmath \\ --enable-shmop \\ --enable-sysvsem \\ --enable-inline-optimization \\ --enable-mbregex \\ --enable-fpm \\ --enable-mbstring \\ --enable-ftp \\ --enable-gd-native-ttf \\ --with-openssl \\ --enable-pcntl \\ --enable-posix \\ --enable-sockets \\ --with-xmlrpc \\ --enable-zip \\ --enable-soap \\ --with-pear \\ --with-gettext \\ --enable-session \\ --with-curl \\ --with-jpeg-dir \\ --with-freetype-dir \\ --enable-opcache \\ --with-fpm-user=www \\ --with-fpm-group=www \\ --enable-bcmath \\ --enable-shmop \\ --enable-mbstring \\ --with-mhash 报错，`error: xml2-config not found. Please check your libxml2 installation.` 单装了 libxml2 是不行的，需要安装 libxml2-dev（Debian是这个包）sudo apt install libxml2 libxml2-dev 报错，`Cannot find OpenSSL's \u003cevp.h\u003e` 安装 apt-get upgrade libssl-dev 报错，`error: Cannot find OpenSSL's libraries` 添加 libdir 配置 --with-libdir=xxxx-linux-gnu 报错，`error: Please reinstall the libcurl distribution` 安装 sudo apt-get install libcurl4-openssl-dev make \u0026\u0026 make install ","date":"2016-03-28","objectID":"/linux-nginx-php-mysql/:2:4","tags":["linux","php","nginx","mysql"],"title":"LNMP 基础环境搭建","uri":"/linux-nginx-php-mysql/"},{"categories":["documentation"],"content":"总结 手动编译安装的过程，很多时候的报错其实也就是三种情况 库缺失，可以通过安装缺失的lib解决 安装后还缺，可以通过configure阶段，修改相关路径解决 头文件缺失，可以通过相关的lib对应的dev包解决，因为一般非dev包不包含 *.h 的文件 ","date":"2016-03-28","objectID":"/linux-nginx-php-mysql/:3:0","tags":["linux","php","nginx","mysql"],"title":"LNMP 基础环境搭建","uri":"/linux-nginx-php-mysql/"},{"categories":["documentation"],"content":"为什么使用包管理？因为方便！ 因为我目前的是Debian，所以介绍的是apt ","date":"2016-01-16","objectID":"/linux-package-manager-usage-apt/:0:0","tags":["linux","apt"],"title":"Apt包管理使用","uri":"/linux-package-manager-usage-apt/"},{"categories":["documentation"],"content":"Apt 包管理工具 安装 apt-get install pkg( pkgs...) 更新软件包列表 apt-get update 更新软件 apt-get upgrade apt-get upgrade pkg 查看依赖 apt-cache depends pkg 查看当前包所依赖的包，apt-cache rdepends pkg 查看依赖当前包的包 Mark 一下 ","date":"2016-01-16","objectID":"/linux-package-manager-usage-apt/:1:0","tags":["linux","apt"],"title":"Apt包管理使用","uri":"/linux-package-manager-usage-apt/"},{"categories":["documentation"],"content":"前言 很久没写Java，忽然想搭建个环境「..「 直接刚 ","date":"2015-11-26","objectID":"/maven-env-build/:1:0","tags":["maven"],"title":"Maven环境搭建","uri":"/maven-env-build/"},{"categories":["documentation"],"content":"环境搭建（只有Mac） ","date":"2015-11-26","objectID":"/maven-env-build/:2:0","tags":["maven"],"title":"Maven环境搭建","uri":"/maven-env-build/"},{"categories":["documentation"],"content":"Java 安装Java很简单，直接Oracle官网下载，最新是1.8，直接最新版 PS：此处可以用brew cask安装，具体自行google 安装好之后，就是配置环境了，有两个环境变量， JAVA_HOME（没有它，Maven会报错）和 CLASS_PATH（Java应用运行时找包会在这找），Java目录比较难找，可以用which命令找下路径，一般是这样的/Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home 然后随便打开一个跟 profile（或者rc）相关的文件，就.bash_profile之类的，添加 # 配置Java Home JAVA_HOME=\"/Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home\" export JAVA_HOME # 配置Class Path CLASS_PATH=\"$JAVA_HOME/lib\" export CLASS_PATH # 添加PATH export PATH=$PATH:$JAVA_HOME/bin ","date":"2015-11-26","objectID":"/maven-env-build/:2:1","tags":["maven"],"title":"Maven环境搭建","uri":"/maven-env-build/"},{"categories":["documentation"],"content":"Maven 安装 Maven ，简单，brew install maven， M2_HOME、MAVEN_HOME 配不配貌似没有影响 ","date":"2015-11-26","objectID":"/maven-env-build/:2:2","tags":["maven"],"title":"Maven环境搭建","uri":"/maven-env-build/"},{"categories":["documentation"],"content":"测试环境 java －version 查看Java版本 javac 查看Java编译命令是否可以使用 mvn -v 查看Maven版本 ","date":"2015-11-26","objectID":"/maven-env-build/:2:3","tags":["maven"],"title":"Maven环境搭建","uri":"/maven-env-build/"},{"categories":["documentation"],"content":"新建项目测试 打开命令行 在当前目录下新建Maven Web项目 mvn archetype:create // 创建命令 -DgroupId=com.eata // 设置GroupId -DartifactId=Newone // 设置ArtifactId -DarchetypeArtifactId=maven-archetype-webapp // 这是Maven的创建Web项目的模版，此外还有很多模版，可自行搜索 创建完后，会有一个新文件夹Newone出现 执行mvn，然后会显示出错 No goals have been specified for this build. You must specify a valid lifecycle phase or a goal in the format : or :[:]:. Available lifecycle phases are: validate, initialize, generate-sources, process-sources, generate-resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, process-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy, pre-clean, clean, post-clean, pre-site, site, post-site, site-deploy. 报上面异常是因为缺少生命周期 对于Maven有个很重要的概念，叫生命周期（lifecycle），从上看的出错信息看来，mvn执行需要至少一个生命周期（因为No goals）作为参数 插（maven 生命周期） Maven 有三组主要的生命周期，default（用于构建应用），clean（用于清除上一次构建的数据），site（用于生成应用的站点文档，然而里面跟应用构建没有关联），这三组生命周期调用不会产生交集 clean 周期最简单，里面只有三个小周期，一般直接 mvn clean site 周期跟 clean 差不多，有四个，一般也是直接用mvn site default 周期关系到整个应用的构建过程，在不细分的情况下（copy），简单（按顺序）分为compile（编译主代码到主输出目录），test（执行测试用例），package（创建jar包），install（将项目输出构件安装在本地仓库），deploy（将项目输出构件部署到远程仓库） 接下来执行mvn deploy，然后又会显示出错 Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.7:deploy (default-deploy) on project Newone: Deployment failed: repository element was not specified in the POM inside distributionManagement element or in -DaltDeploymentRepository=id::layout::url parameter 原因是deploy的生命周期是会把项目部署到远程仓库的，这里没有所谓远程仓库，所以一般构件只需要到package就足够了 Enjoy!! ","date":"2015-11-26","objectID":"/maven-env-build/:3:0","tags":["maven"],"title":"Maven环境搭建","uri":"/maven-env-build/"},{"categories":["documentation"],"content":"前言 访问 IIS 服务的时候，报 ERROR 500 只显示了：您查找的资源存在问题,因而无法显示。 完全不知道错在哪 「..「 ","date":"2015-11-26","objectID":"/iis-debug-mode/:1:0","tags":["iis"],"title":"IIS开启错误调试","uri":"/iis-debug-mode/"},{"categories":["documentation"],"content":"解决方式 打开 IIS 的错误需要配置两个地方 ","date":"2015-11-26","objectID":"/iis-debug-mode/:2:0","tags":["iis"],"title":"IIS开启错误调试","uri":"/iis-debug-mode/"},{"categories":["documentation"],"content":"打开原系统的出错提示 打开IIS，在功能视图中找到“错误页”，双击进去后，看最右边的“操作”下的“编辑功能设置…”，将“错误响应”下的“详细错误”勾上。 ","date":"2015-11-26","objectID":"/iis-debug-mode/:2:1","tags":["iis"],"title":"IIS开启错误调试","uri":"/iis-debug-mode/"},{"categories":["documentation"],"content":"打开IIS的出错提示 双击“ASP”图标，然后在右边的窗口中展开“调试属性”，把“将错误发送到浏览器”设为True即可。微软基于安全性考虑不将错误信息发送给浏览器，记得在网站正式发布时，还原此项设置。 Mark 一下 ","date":"2015-11-26","objectID":"/iis-debug-mode/:2:2","tags":["iis"],"title":"IIS开启错误调试","uri":"/iis-debug-mode/"},{"categories":["documentation"],"content":"难以理解为什么现在还有人用win去跑PHP ","date":"2015-10-05","objectID":"/php-fastcgi-on-winserver2003/:0:0","tags":["php","iis"],"title":"Windows Server2003开启IIS和PHP环境","uri":"/php-fastcgi-on-winserver2003/"},{"categories":["documentation"],"content":"必要工具 扩展下载地址 IIS的英文文档 PHP window下载 ","date":"2015-10-05","objectID":"/php-fastcgi-on-winserver2003/:1:0","tags":["php","iis"],"title":"Windows Server2003开启IIS和PHP环境","uri":"/php-fastcgi-on-winserver2003/"},{"categories":["documentation"],"content":"安装IIS的FastCGI扩展 打开下载扩展的链接，选择自己的windows2003的版本32位还是64位 如果不知道自己的服务器多少位的，可以打开运行，执行winmsd.exe看看 下载相应msi文件下载，双击运行一直确定就可以了！ ","date":"2015-10-05","objectID":"/php-fastcgi-on-winserver2003/:2:0","tags":["php","iis"],"title":"Windows Server2003开启IIS和PHP环境","uri":"/php-fastcgi-on-winserver2003/"},{"categories":["documentation"],"content":"安装PHP 到PHP下载的网站选择线程不安全的版本进行下载安装。注意版本，PHP\u003e=5.3的版本才可以用FastCGI。 安装php，直接解压，不多说，配置Path，验证时打开CMD输入php -v就可以看到php当前版本号。 修改PHP配置文件，一般PHP解压文件根目录会有两个配置文件，一个用于开发，一个用于生产，随便复制一个，重命名为php.ini。打开，里面一般需要配置几个地方，一个是时区data.timezone=Asia/Shanghai，一个是扩展的目录extension_dir=\"C:\\PHP\\ext\"，剩下的就是打开扩展了，将需要打开的扩展前面的;去掉。 ","date":"2015-10-05","objectID":"/php-fastcgi-on-winserver2003/:3:0","tags":["php","iis"],"title":"Windows Server2003开启IIS和PHP环境","uri":"/php-fastcgi-on-winserver2003/"},{"categories":["documentation"],"content":"是配置FastCGI扩展 从CMD进入目录%windir%\\system32\\inetsrv， 执行cscript fcgiconfig.js -add -section:\"PHP\" -extension:php -path:\"C:\\PHP\\php-cgi.exe\"，将路径换为PHP解压路径 打开IIS6.0管理器，右击网站选择属性，点击根目录的tab，下方有个管理，如果之前配置过了，可以找到后缀为.php的那一栏双击，没有则新建。 进入后点击浏览，到目录%windir%\\system32\\inetsrv，找到fcgiext.dll文件，选择，扩展名自然就是.php，下面有动词什么的就是HTTP的六个方法，选择全部就可以了。 接下来需要配置fcgiext.dll，在同一目录下找到文件fcgiext.ini，在[TYPE]下添加php=PHP，回车然后。。继续添加[PHP]，回车然后。。继续添加ExePath=c:\\php\\php-cgi.exe，路径换回解压的路径，这样，重启应用程序池，接下来测试 OoO 搞定 ","date":"2015-10-05","objectID":"/php-fastcgi-on-winserver2003/:4:0","tags":["php","iis"],"title":"Windows Server2003开启IIS和PHP环境","uri":"/php-fastcgi-on-winserver2003/"},{"categories":["documentation"],"content":"处理完的桌面环境看着比我还磕碜 ","date":"2014-08-07","objectID":"/linux-desktop-reinforce/:0:0","tags":["linux","shell"],"title":"Linux桌面环境美化","uri":"/linux-desktop-reinforce/"},{"categories":["documentation"],"content":"前言 搭桌面环境后 原因：丑，我不喜欢 找一下美化的资源～ 下面这个还不错～ 至少看起来是不错的～ 目测用的是Gnome2、conky、gnome-terminal、docky、Faenza图标（我只要了Conky的配置「..「） ","date":"2014-08-07","objectID":"/linux-desktop-reinforce/:1:0","tags":["linux","shell"],"title":"Linux桌面环境美化","uri":"/linux-desktop-reinforce/"},{"categories":["documentation"],"content":"想要的效果 网上搜来的网上搜来的 \" 网上搜来的 ","date":"2014-08-07","objectID":"/linux-desktop-reinforce/:1:1","tags":["linux","shell"],"title":"Linux桌面环境美化","uri":"/linux-desktop-reinforce/"},{"categories":["documentation"],"content":"最终效果 最终效果最终效果 \" 最终效果 ","date":"2014-08-07","objectID":"/linux-desktop-reinforce/:1:2","tags":["linux","shell"],"title":"Linux桌面环境美化","uri":"/linux-desktop-reinforce/"},{"categories":["documentation"],"content":"开始 ","date":"2014-08-07","objectID":"/linux-desktop-reinforce/:2:0","tags":["linux","shell"],"title":"Linux桌面环境美化","uri":"/linux-desktop-reinforce/"},{"categories":["documentation"],"content":"护眼桌面 先来定张桌面背景～贯彻保护眼睛的方针～ 护眼背景护眼背景 \" 护眼背景 ","date":"2014-08-07","objectID":"/linux-desktop-reinforce/:2:1","tags":["linux","shell"],"title":"Linux桌面环境美化","uri":"/linux-desktop-reinforce/"},{"categories":["documentation"],"content":"Slim（Display Manager） 先安装主题包# pacman -S slim-themes archlinux-themes-slim 然后#vim /etc/slim.conf，将current_theme修改成想要的主题 我用的是这个archlinux-darch-white Archlinux登陆Archlinux登陆 \" Archlinux登陆 ","date":"2014-08-07","objectID":"/linux-desktop-reinforce/:2:2","tags":["linux","shell"],"title":"Linux桌面环境美化","uri":"/linux-desktop-reinforce/"},{"categories":["documentation"],"content":"窗口管理器Openbox 使用 openbox 窗口主题，我用Owl，直接下载下来用 obconf 安装就OK啦 Openboxopenbox \" Openbox 除了Openbox的主题，还需要配置软件的主题Gtk2、Gtk3、Qt的主题都用clearlook，字体就用文泉译的 配置Gtk2和Qt主题，先安装gtk-chtheme qtcurve-qt4 然后运行gtk-chtheme（必要的gtk引擎需要安装）， gtk-chthemegtk-chtheme \" gtk-chtheme 运行 qtconfig-qt4，GUI Style 选择 GTK+，尽量让 Qt 和 Gtk2 主题一致 qtconfig-qt4qtconfig-qt4 \" qtconfig-qt4 剩下个Gtk3（本来不想弄的，偏偏有个gedit是GTK3的..），从AUR中安装clearlooks-phenix-gtk-theme，然后编辑$HOME/.config/gtk-3.0/Settings.ini文件，没有就创建，将gtk-theme-name = Clearlooks-Phenix添加到[Settings]下 ","date":"2014-08-07","objectID":"/linux-desktop-reinforce/:2:3","tags":["linux","shell"],"title":"Linux桌面环境美化","uri":"/linux-desktop-reinforce/"},{"categories":["documentation"],"content":"图标 ～～ 最主要的是文件管理器的图标（表示刚装完pcmanfm的时候毛都没有），同样是桌面的图标（我使用conky，没用pcmanfm上的桌面），还有taskbar显示的图表，最后是快捷启动栏的图标，首先是下载安装各种图标，AUR上大把，图标一般在 /usr/share/icons/ 文件夹下，对应的文件夹名就是图标主题名，或者闲得蛋疼自己下载的，应放在$HOME/.icons/文件夹下 默认的.gtkrc-2.0会改变，但是里面有个include包含了文件.gtkrc-mine，所以，touch .gtkrc-mine \u0026\u0026 echo gtk-icon-theme-name = \"icon_theme\" \u003e\u003e .gtkrc.mine 基本上软件的界面什么的就这么OK了（应该吧「_「///） ","date":"2014-08-07","objectID":"/linux-desktop-reinforce/:2:4","tags":["linux","shell"],"title":"Linux桌面环境美化","uri":"/linux-desktop-reinforce/"},{"categories":["documentation"],"content":"配置tint2 接下来是配置tint2～ 下面介个是我的配置文件～简单为主～ # Tint2 config file # Generated by tintwizard (http://code.google.com/p/tintwizard/) # For information on manually configuring tint2 see http://code.google.com/p/tint2/wiki/Configure # To use this as default tint2 config: save as $HOME/.config/tint2/tint2rc # Background definitions # ID 1 panel rounded = 0 border_width = 0 background_color = #222222 100 border_color = #000000 100 # ID 2 taskbar rounded = 0 border_width = 0 background_color = #000000 100 border_color = #224466 100 # ID 3 task rounded = 0 border_width = 0 background_color = #FFA300 100 border_color = #224488 100 # Panel panel_items = LTSC panel_monitor = all panel_position = bottom left horizontal panel_size = 100% 22 panel_margin = 0 0 panel_padding = 0 0 0 panel_dock = 0 wm_menu = 1 panel_layer = bottom panel_background_id = 1 # Launchers launcher_icon_theme = AwOkenDark launcher_padding = 5 0 5 launcher_background_id = 0 launcher_icon_size = 22 launcher_item_app = /home/XXOO/.config/tint2/applications/shutdown.desktop launcher_item_app = /usr/share/applications/chromium.desktop launcher_item_app = /usr/share/applications/gimp.desktop launcher_item_app = /usr/share/applications/gedit.desktop launcher_item_app = /usr/share/applications/pcmanfm.desktop launcher_item_app = /usr/share/applications/goldendict.desktop # Panel Autohide autohide = 0 autohide_show_timeout = 0.3 autohide_hide_timeout = 2 autohide_height = 2 strut_policy = follow_size # Taskbar taskbar_mode = single_desktop taskbar_padding = 0 0 5 taskbar_background_id = 0 #taskbar_active_background_id = 2 # Tasks urgent_nb_of_blink = 8 task_icon = 1 task_text = 1 task_centered = 1 task_maximum_size = 180 20 task_padding = 5 5 task_background_id = 0 task_active_background_id = 3 task_urgent_background_id = 0 task_iconified_background_id = 0 # Task Icons task_icon_asb = 100 0 0 task_active_icon_asb = 100 0 0 task_urgent_icon_asb = 100 0 0 task_iconified_icon_asb = 100 0 0 # Fonts task_font = sans 8 task_font_color = #999999 80 task_active_font_color = #343434 100 task_urgent_font_color = #FFFFFF 100 task_iconified_font_color = #FFFFFF 80 font_shadow = 0 # System Tray systray = 1 systray_padding = 5 0 5 systray_sort = ascending systray_background_id = 0 systray_icon_size = 22 systray_icon_asb = 100 0 0 # Clock time1_format = %H:%M %A %d time1_font = sans 8 clock_font_color = #00FF00 100 clock_padding = 10 0 clock_background_id = 0 clock_rclick_command = orage # Tooltips tooltip = 0 tooltip_padding = 5 5 tooltip_show_timeout = 0.3 tooltip_hide_timeout = 0.3 tooltip_background_id = 6 tooltip_font = sans 10 tooltip_font_color = #000000 100 # Mouse mouse_middle = none mouse_right = none mouse_scroll_up = none mouse_scroll_down = none # Battery battery = 0 battery_low_status = 10 battery_low_cmd = notify-send \"battery low\" battery_hide = 100 bat1_font = sans 8 bat2_font = sans 6 battery_font_color = #8CA587 73 battery_padding = 0 0 battery_background_id = 1 # End of config ","date":"2014-08-07","objectID":"/linux-desktop-reinforce/:2:5","tags":["linux","shell"],"title":"Linux桌面环境美化","uri":"/linux-desktop-reinforce/"},{"categories":["documentation"],"content":"自定义关机按钮 launcher_item_app = /home/{user}/.config/tint2/applications/shutdown.desktop，直接关机的按钮（没写复杂脚本，直接点击就是poweroff），Icon是在图标主题里找的 [Desktop Entry] Name=Poweroff Comment=poweroff Exec=/usr/bin/poweroff Icon=/usr/share/icons/AwOken/clear/24x24/apps/gshutdown.png Terminal=false Type=Application Categories=Application; Conky用的是第一张图片的那个，叫Infinity，然后自己修改conkyrc，添加了个RSS BTW：透明化可以用transset-df，阴影可以用xcompmgr，我效果里用了一点点阴影 ","date":"2014-08-07","objectID":"/linux-desktop-reinforce/:2:6","tags":["linux","shell"],"title":"Linux桌面环境美化","uri":"/linux-desktop-reinforce/"},{"categories":["documentation"],"content":"最后再看一看 我简直是天才我简直是天才 \" 我简直是天才 ","date":"2014-08-07","objectID":"/linux-desktop-reinforce/:2:7","tags":["linux","shell"],"title":"Linux桌面环境美化","uri":"/linux-desktop-reinforce/"},{"categories":["documentation"],"content":"就想自己折腾一下桌面环境搭建 ","date":"2014-08-06","objectID":"/linux-desktop/:0:0","tags":["linux","shell"],"title":"自己搭建Linux桌面环境","uri":"/linux-desktop/"},{"categories":["documentation"],"content":"前言 若要让自己选择Linux桌面环境，要么就来个KDE，不需要再有什么额外的东东，办公代码一应俱全，特效也还是可以的，要么来个Cinnamon，同样挺漂亮的，相比那些节约内存的桌面环境，用着更舒服、养眼～（习惯与平铺式桌面的用户当然就另当别论啦），当然，内存应该消耗在运行的软件上，而不是在所谓漂亮的桌面上，这点我也是认同的，So，如果真需要选择一款低内存消耗的，那就Mate吧（好像也不是很低） 所以，我可以自己组织搭建 假设驱动已经安装完 ","date":"2014-08-06","objectID":"/linux-desktop/:1:0","tags":["linux","shell"],"title":"自己搭建Linux桌面环境","uri":"/linux-desktop/"},{"categories":["documentation"],"content":"需求 登陆管理器，DM 桌面需要使用鼠标 需要展示时间，系统托盘，任务栏，快捷起动栏 有桌面图标 OR 有系统监测 ","date":"2014-08-06","objectID":"/linux-desktop/:2:0","tags":["linux","shell"],"title":"自己搭建Linux桌面环境","uri":"/linux-desktop/"},{"categories":["documentation"],"content":"工具选择 ","date":"2014-08-06","objectID":"/linux-desktop/:3:0","tags":["linux","shell"],"title":"自己搭建Linux桌面环境","uri":"/linux-desktop/"},{"categories":["documentation"],"content":"系统基础软件 slim 作为登陆管理器 openbox 作为窗口管理器 feh 设置墙纸 tint2 （tint-svn）作为面板提供任务栏、系统托盘、快捷启动栏 conky （conky-lua）作为系统监测 pcmanfm 作为文件管理器（也可以做桌面） ","date":"2014-08-06","objectID":"/linux-desktop/:3:1","tags":["linux","shell"],"title":"自己搭建Linux桌面环境","uri":"/linux-desktop/"},{"categories":["documentation"],"content":"应用工具 LibreOffice Mupdf（简单）看PDF， 视频播放其VLC 音乐播放器Exaile 文本编辑器VIM、gedit 浏览器Chromium 输入法Fcitx小企鹅+sunpinyin 音量托盘图标volumeicon ","date":"2014-08-06","objectID":"/linux-desktop/:3:2","tags":["linux","shell"],"title":"自己搭建Linux桌面环境","uri":"/linux-desktop/"},{"categories":["documentation"],"content":"安装 首先需要安装X11，#pacman -S xorg-server xorg-xinit，需要界面的东西离不开这两个东西 安装yaourt，添加源#vim /etc/pacman.conf [archlinuxfr] SigLevel=Never Server=http://repo.archlinux.fr/$arch 更新#pacman -Syy，然后就可以安装了#pacman -S yaourt Tips：可以先安装bash-completion，#pacman -S bash-completion 安装窗口管理器和配置工具，#pacman -S openbox obmenu obconf menumaker，然后编辑.initrc文件，在最后加上exec openbox-session，将/etc/xdg/openbox/中的文件复制到$HOME/.config/openbox/下 安装DM，#pacman -S slim，然后添加开机启动#systemctl enable slim@service 安装面板以及tint2配置工具tintwizard，yaourt -S tint2-svn tintwizard，tintwizard并不支持快捷启动栏，而且会自动删除不支持的配置，所以每次配置后需要手动修改$HOME/.config/tint2/tint2rc，所以这个配置工具我用了一次就卸了，然后手动添加快捷启动栏的快捷方式，最后将tint2 \u0026加入Openbox的启动脚本$HOME/.config/openbox/autostart中 安装系统监测conky，yaourt -S conky-lua，相对于conky多了对lua的支持，不需要另外配置lua，同样将conky \u0026添加到Openbox启动脚本中 安装文件管理器，#pacman -S pcmanfm ntfs-3g，安装完后如果需要显示桌面，可以将pcmanfm --desktop \u0026替代conky \u0026 安装编辑器，#pacman -S vim gedit 安装音量图标，#pacman -S volumeicon，将volumeicon \u0026加到tint2 \u0026后面 安装输入法，#pacman -S fcitx-im sunpinyin，编辑.xinitrc，加入环境变量 export GTK_IM_MODULE=fcitx export QT_IM_MODULE=fcitx export XMODIFIERS=\"@im=fcitx\" 添加fcitx \u0026到Openbox启动脚本，在tint2 \u0026后 办公软件，#pacman -S libreoffice mupdf 视频音乐，#pacman -S vlc，yaourt -S exaile 浏览器，#pacman -S chromium 顺便添加张桌面壁纸，#pacman -S feh，在Openbox启动脚本中加上feh --bg-scale '/path/of/desktop_image.jpg \u0026 基本环境已经完成 虽然丑 至少能用 ","date":"2014-08-06","objectID":"/linux-desktop/:4:0","tags":["linux","shell"],"title":"自己搭建Linux桌面环境","uri":"/linux-desktop/"},{"categories":["documentation"],"content":"linux 的好 都懂，windows 的好 也都懂，小孩子才做选择题「..「 ","date":"2014-08-05","objectID":"/duel-system-leptop/:0:0","tags":["system","windows","linux","shell"],"title":"笔记本上双系统安装","uri":"/duel-system-leptop/"},{"categories":["documentation"],"content":"为啥要装双系统 原来用着的 Windows 用着越来越慢卡，本来就准备重装 作为程序狗，Linux 可能在某些方面比较友好，尝试在日常使用 QQ聊天、IE网银等无法直接放弃 守护的笑容守护的笑容 \" 守护的笑容 其他方案 两台电脑 没钱 wine/虚拟机 电脑配置不够，用着会炸毛 ","date":"2014-08-05","objectID":"/duel-system-leptop/:1:0","tags":["system","windows","linux","shell"],"title":"笔记本上双系统安装","uri":"/duel-system-leptop/"},{"categories":["documentation"],"content":"系统选择 Win：win7/win8/win8.1 对于新的 win8 和 8.1 实在是看不惯，选 win7 Linux：Ubuntu/Archlinux/Debian/Fedora/CentOs/LFS Ubuntu 和 Debian 都在桌面环境比较成熟，一键安装没毛病 Fedora 和 CentOs 相对服务端使用更多，包一般比较旧 LFS 系统玩你还是你玩系统 Archlinux 安装相对比较麻烦，但都是入门需要涉及的系统知识，滚动升级，装好就能一直滚，丰富的文档和AUR 所以选兼顾学习和桌面，选 Archlinux ，也适合新手 ","date":"2014-08-05","objectID":"/duel-system-leptop/:2:0","tags":["system","windows","linux","shell"],"title":"笔记本上双系统安装","uri":"/duel-system-leptop/"},{"categories":["documentation"],"content":"安装介质 笔记本电脑：4G/512机械 U盘一个 win7-32镜像、Archlinux镜像各一个 UltralISO软件/dd4windows ","date":"2014-08-05","objectID":"/duel-system-leptop/:3:0","tags":["system","windows","linux","shell"],"title":"笔记本上双系统安装","uri":"/duel-system-leptop/"},{"categories":["documentation"],"content":"分区计划 Windows只分一个（256G），NTFS分区同时可以被Archlinux访问，足够了 Archlinux分了两个，/（64G）和/home（128G），可以独立分多几个，也可以预留一部分空间，需要再加 整体大概剩余 64G 空间，后续扩充的时候再使用 ","date":"2014-08-05","objectID":"/duel-system-leptop/:4:0","tags":["system","windows","linux","shell"],"title":"笔记本上双系统安装","uri":"/duel-system-leptop/"},{"categories":["documentation"],"content":"Windows7 系统安装 官网下载、安装UltralISO 打开win7镜像，刻录到U盘 重启，安装（注意硬盘分区，可以直接在安装过程分区） 一步一步跟着做，安装完成后注册，更新。（此处支持正版） 打开软件卸载—\u003e打开或关闭windows功能，删除不需要的功能 安装软件：QQ，IE（10 or 9就好），WPS Office，mupdf，uTorrent。 win7 的安装十分简单 ","date":"2014-08-05","objectID":"/duel-system-leptop/:5:0","tags":["system","windows","linux","shell"],"title":"笔记本上双系统安装","uri":"/duel-system-leptop/"},{"categories":["documentation"],"content":"Archlinux 系统安装 装好win7后，在win7下下载dd for windows，将Archlinux镜像写入U盘 PS: 用UNetbootin好像也是可以的，用UltralISO刻录的启动不了 而量产用的镜像能启动，但是只是能启动而已，也可能是我操作错误。 分区：cfdisk /dev/sda，/、/home，没有Swap 文件系统：mkfs.ext4 /dev/sdaX，文件系统直接选 ext4 挂载：mount /dev/sdaX /mnt，X为根目录分区；mkdir /mnt/home，需要先新建Home目录，再挂载；mount /dev/sdaY /mnt/home，Y为Home目录分区 修改镜像列表：vim /etc/pacman.d/mirrorlist，校园网用户可以加上上海交大的源，那个速度十分不错，其他用户可以将163等几个国内的源放到列表最前面 安装基本系统：pacstrap -i /mnt base base-devel，一般装上这两个就OK，喜欢自定义可以选择自己需要的包安装，在base里包含了基本系统使用的工具，base-devel包含了开发需要的一些工具，装好后#pacman -S XXX查一下就知道啦 生成fstab：genfstab -U -p /mnt \u003e\u003e /mnt/etc/fstab 生成一次就行，之后最好只用手动修改 切换系统：arch-chroot /mnt /bin/bash，使用bash进入系统，若没有最后的参数，默认为sh Locale：nano /etc/locale.gen，将中文和英文前面的#去掉，然后locale-gen一下～ Time Zone：ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime Hostname：echo Fengzi \u003e/etc/hostname Password：passwd 安装Grub：pacman -S grub os-prober os-prober是为了让Grub能搜索到刚刚装上的win7，grub-install --target=i386-pc --recheck /dev/sda 将grub安装到硬盘上，grub-mkconfig -o /boot/grub/grub.cfg 配置文件在 /boot/grub/gurb.cfg 重启：exit，umount -R /mnt，reboot 添加用户：useradd -m -g users psycho，passwd psycho 安装ALSA：声卡驱动，#pacman -S alsa-utils，之后可以在终端alsamixer，在下面显示为MM的为静音，一般条Master和PCM就OK了 安装显卡驱动：A卡和Intel的直接开源驱动无异意，N卡想要更好的体验就去装闭源的，由于我电脑属于垃圾电脑，对我来说方便就好，开源的分别为xf86-video-ati xf86-video-intel xf-video-nouveau，不清楚状况的就#pacman -S xf86-video-vesa～ 安装触摸板驱动：#pacman -S xf86-input-synaptics 安装X11：#pacman -S xorg-xinit xorg-server，工具包什么的就不需要装了 安装桌面：目前功能完整多样的桌面环境有Xfce（算么？）、Gnome、KDE、E17（18？）、LXDE（gtk or qt）、Mate（Gnome2的一个fork）、Cinnamon（Gnome3的一个fork）等，都是基于gtk or qt的，除了E17自成一家。 ","date":"2014-08-05","objectID":"/duel-system-leptop/:6:0","tags":["system","windows","linux","shell"],"title":"笔记本上双系统安装","uri":"/duel-system-leptop/"},{"categories":["documentation"],"content":"其他桌面环境 Xfce：简单，装过，资源消耗低，功能该有的都有，像瘦子，没饿死那种 Gnome：2的话有Mate，3的话有Cinnamon，是Mint的默认桌面，都比较漂亮！ LXDE：听说有gtk和qt两个版本，相比Xfce，更倾向与这货，资源消耗同样较低，安装#pacman -S lxde，想拆分这个group来安装也可以～ KDE：漂亮，功能齐全，特效多，插件多，不过同样资源消耗大，慢（和win7应该差不多吧），最简安装就好#pacman -S kdebase kdebase-workspace，其余软件，按需安装 E17：好像是挺漂亮的，听说资源消耗还挺低。。没装过 Mate：虽然有人说里面的都是一对过时的代码，不过。。一般人管他代码是怎样的。。用起来舒服就好，安装需要先修改/etc/pacman.conf，在里面加入Mate的源，Server=http://packages.mate-desktop.org/repo/archlinux/$arch，然后更新#pacman -Syy，安装#pacman -S mate Cinnamon：这货在官方源里就有，安装#pacman -S cinnamon 其他类似平铺式的桌面不适合一般用户。。。（说的就是我） Enjoy! ","date":"2014-08-05","objectID":"/duel-system-leptop/:6:1","tags":["system","windows","linux","shell"],"title":"笔记本上双系统安装","uri":"/duel-system-leptop/"},{"categories":["documentation","tech"],"content":"本着娱乐的态度尝试了免费的AppFog云服务 ","date":"2014-06-21","objectID":"/appfog-usage/:0:0","tags":["appfog","cloud"],"title":"Appfog 使用笔记","uri":"/appfog-usage/"},{"categories":["documentation","tech"],"content":"必要工具 Ruby 和对应的 DevKit 因为 本地使用的 af 工具是 基于 ruby 的实现，本地访问必须安装 Ruby1.9.3 Ruby1.9.3对应的Devkit ","date":"2014-06-21","objectID":"/appfog-usage/:1:0","tags":["appfog","cloud"],"title":"Appfog 使用笔记","uri":"/appfog-usage/"},{"categories":["documentation","tech"],"content":"注册Appfog用户（必须） 注册过程不展示，注册用户后可使用内存为512MB，刚好可以满足两个App和两个Service的创建 ","date":"2014-06-21","objectID":"/appfog-usage/:2:0","tags":["appfog","cloud"],"title":"Appfog 使用笔记","uri":"/appfog-usage/"},{"categories":["documentation","tech"],"content":"创建Java应用 选择 Java (需要512)、Aws (网传说比较块「..「)，进入App，添加Mysql数据库 ","date":"2014-06-21","objectID":"/appfog-usage/:3:0","tags":["appfog","cloud"],"title":"Appfog 使用笔记","uri":"/appfog-usage/"},{"categories":["documentation","tech"],"content":"安装本地访问工具,用af访问 ","date":"2014-06-21","objectID":"/appfog-usage/:4:0","tags":["appfog","cloud"],"title":"Appfog 使用笔记","uri":"/appfog-usage/"},{"categories":["documentation","tech"],"content":"安装Ruby: 下载Ruby 1.9.3 的 Installer 根据上方的链接地址下载 查看镜像 mirror (sources) 查看 Sources: gem sources -l 如果有，可以删掉 gem sources --remove XXXXXX 添加 taobao 的镜像 添加Sources: gem sources -a https://ruby.taobao.org/ ","date":"2014-06-21","objectID":"/appfog-usage/:4:1","tags":["appfog","cloud"],"title":"Appfog 使用笔记","uri":"/appfog-usage/"},{"categories":["documentation","tech"],"content":"安装工具 af 更新 gem gem update --system 安装 af gem install af 登陆 AppFog 登录就可以使用: af login 根据步骤输入用户名和密码就可以开始使用af进行管理啦 ","date":"2014-06-21","objectID":"/appfog-usage/:4:2","tags":["appfog","cloud"],"title":"Appfog 使用笔记","uri":"/appfog-usage/"},{"categories":["documentation","tech"],"content":"本地访问 Appfog 数据库 为了本地可以访问AppFog的数据库，需要使用SSH管道(tunnel)，先安装caldecott PS: Tunnel其实只是打开一个端口，当访问本地该端口时，将信息转发到远程服务器中 安装: gem install caldecott 如果显示需要C Compiler 先把Devkit安装好(直接下载解压到目标路径) 进入Devkit目录，运行 ruby dk.rb init ruby dk.rb install 搞定Devkit再安装caldecott 安装完成后: af tunnel ","date":"2014-06-21","objectID":"/appfog-usage/:4:3","tags":["appfog","cloud"],"title":"Appfog 使用笔记","uri":"/appfog-usage/"},{"categories":["documentation","tech"],"content":"遇到的一些蛋碎的问题 第一次安装了 Ruby2.0，gem 安装 caldecott 时缺少 Devkit 解决: 下载对应Devkit安装 安装完成后 af tunnel 依然显示 caldecott not install 解决: 直接卸载关于2.0版本的，安装所有1.9.3相关的（原因不明，菜是原罪） 运行 af tunnel 需要在Appfog上添加一个应用，但是内存用完了 解决: 缩小Java应用的内存降低，默认Caldecott需要64Mb，我妥妥的给了128Mb（钱能解决的方案都不是好方案OK？） 无法使用本地 HeidiSql 连接远程服务 解决: 开启Sql服务，将Sql/bin添加到Path Enjoy～ ","date":"2014-06-21","objectID":"/appfog-usage/:5:0","tags":["appfog","cloud"],"title":"Appfog 使用笔记","uri":"/appfog-usage/"},{"categories":["markdown","documentation"],"content":"helloworld","date":"2010-09-01","objectID":"/why-bloging/","tags":["helloworld"],"title":"Start The World","uri":"/why-bloging/"},{"categories":["markdown","documentation"],"content":"Why Blogging 因为我行呀 ","date":"2010-09-01","objectID":"/why-bloging/:1:0","tags":["helloworld"],"title":"Start The World","uri":"/why-bloging/"},{"categories":["markdown","documentation"],"content":"helloworld 最初的\"hello, world\"打印内容有个标准，即全小写，有逗号，逗号后空一格，且无感叹号。不过沿用至今，完全遵循传统标准形式的反而很少出现。 echo \"hello, world\\n\"; ","date":"2010-09-01","objectID":"/why-bloging/:2:0","tags":["helloworld"],"title":"Start The World","uri":"/why-bloging/"},{"categories":["markdown","documentation"],"content":"引用 之前使用的是 Jekyll，后来。。。反正现在用 hugo hugo hugo-theme github-page 慢慢整理旧文档和翻新后的文档归档到 HERE ","date":"2010-09-01","objectID":"/why-bloging/:3:0","tags":["helloworld"],"title":"Start The World","uri":"/why-bloging/"}]